// Generated by IcedCoffeeScript 1.3.3b
(function() {
  var CoffeeScript, EXIT_E_CMD_LINE, EXIT_E_COMPILATION, EXIT_E_IO, EXIT_SUCCESS, OPTIONS, compilePath, compilerOptions, exists, fs, iced, mkdir_p, path, printLine, printVersion, printWarn, run, __iced_k, __iced_k_noop,
    __slice = [].slice;

  iced = {
    Deferrals: (function() {

      function _Class(_arg) {
        this.continuation = _arg;
        this.count = 1;
        this.ret = null;
      }

      _Class.prototype._fulfill = function() {
        if (!--this.count) return this.continuation(this.ret);
      };

      _Class.prototype.defer = function(defer_params) {
        var _this = this;
        ++this.count;
        return function() {
          var inner_params, _ref;
          inner_params = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
          if (defer_params != null) {
            if ((_ref = defer_params.assign_fn) != null) {
              _ref.apply(null, inner_params);
            }
          }
          return _this._fulfill();
        };
      };

      return _Class;

    })(),
    findDeferral: function() {
      return null;
    }
  };
  __iced_k = __iced_k_noop = function() {};

  fs = require('fs');

  path = require('path');

  CoffeeScript = require('coffee-script');

  exists = fs.exists || path.exists;

  printLine = function(line) {
    return process.stdout.write(line + '\n');
  };

  printWarn = function(line) {
    return process.stderr.write(line + '\n');
  };

  printVersion = function() {
    printLine("CoffeeScript version " + CoffeeScript.VERSION);
    return process.exit(0);
  };

  OPTIONS = ["Usage: node compile-coffee.js [options] source.coffee destination.js", "Files:", "  source.coffee      Path to the source file #required #var(source)", "  destination.js     Path to the destination file #required #var(destination)", "Compilation options:", "  -b, --bare         Compile without a top-level function wrapper", "General options:", "  -v, --version      Display the version number", printVersion];

  EXIT_E_CMD_LINE = 3;

  EXIT_E_IO = 2;

  EXIT_E_COMPILATION = 1;

  EXIT_SUCCESS = 0;

  run = function() {
    var opts;
    opts = require('dreamopt')(OPTIONS);
    if (opts.help) return usage();
    if (opts.version) return version();
    return compilePath(opts.source, opts.destination, opts);
  };

  compilePath = function(source, destination, opts) {
    var coffee, err, itExists, js, ___iced_passed_deferral, __iced_deferrals, __iced_k,
      _this = this;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    (function(__iced_k) {
      __iced_deferrals = new iced.Deferrals(__iced_k, {
        parent: ___iced_passed_deferral,
        filename: "/Users/andreyvit/dev/products/LiveReload/LiveReload23/LiveReload/Compilers/CoffeeScript.lrplugin/scripts/compile-coffeescript.iced",
        funcname: "compilePath"
      });
      fs.readFile(source, __iced_deferrals.defer({
        assign_fn: (function() {
          return function() {
            err = arguments[0];
            return coffee = arguments[1];
          };
        })(),
        lineno: 46
      }));
      __iced_deferrals._fulfill();
    })(function() {
      if ((typeof err !== "undefined" && err !== null ? err.code : void 0) === 'ENOENT') {
        console.error("File not found: " + source);
        process.exit(EXIT_E_IO);
      }
      try {
        js = CoffeeScript.compile(coffee.toString(), compilerOptions(source, opts));
        if (js.length <= 0) js = ' ';
        (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/andreyvit/dev/products/LiveReload/LiveReload23/LiveReload/Compilers/CoffeeScript.lrplugin/scripts/compile-coffeescript.iced",
            funcname: "compilePath"
          });
          exists(path.dirname(destination), __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                return itExists = arguments[0];
              };
            })(),
            lineno: 55
          }));
          __iced_deferrals._fulfill();
        })(function() {
          (function(__iced_k) {
            if (!itExists) {
              (function(__iced_k) {
                __iced_deferrals = new iced.Deferrals(__iced_k, {
                  parent: ___iced_passed_deferral,
                  filename: "/Users/andreyvit/dev/products/LiveReload/LiveReload23/LiveReload/Compilers/CoffeeScript.lrplugin/scripts/compile-coffeescript.iced",
                  funcname: "compilePath"
                });
                mkdir_p(path.dirname(destination), 0777, __iced_deferrals.defer({
                  lineno: 57
                }));
                __iced_deferrals._fulfill();
              })(__iced_k);
            } else {
              return __iced_k();
            }
          })(function() {
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "/Users/andreyvit/dev/products/LiveReload/LiveReload23/LiveReload/Compilers/CoffeeScript.lrplugin/scripts/compile-coffeescript.iced",
                funcname: "compilePath"
              });
              fs.writeFile(destination, js, __iced_deferrals.defer({
                assign_fn: (function() {
                  return function() {
                    return err = arguments[0];
                  };
                })(),
                lineno: 59
              }));
              __iced_deferrals._fulfill();
            })(function() {
              if (err) {
                console.error(err.message);
                return process.exit(EXIT_E_IO);
              }
            });
          });
        });
      } catch (err) {
        printWarn(err instanceof Error && err.stack || ("ERROR: " + err));
        return process.exit(EXIT_E_COMPILATION);
      }
    });
  };

  compilerOptions = function(filename, opts) {
    return {
      filename: filename,
      bare: opts.bare,
      header: true
    };
  };

  mkdir_p = function(path, mode, callback, position) {
    var directory, parts;
    mode = mode || 0777;
    position = position || 0;
    parts = require("path").normalize(path).split("/");
    if (position >= parts.length) {
      if (callback) {
        return callback();
      } else {
        return true;
      }
    }
    directory = parts.slice(0, position + 1).join("/");
    return fs.stat(directory, function(err) {
      if (err === null) {
        return mkdir_p(path, mode, callback, position + 1);
      } else {
        return fs.mkdir(directory, mode, function(err) {
          if (err) {
            if (callback) {
              return callback(err);
            } else {
              throw err;
            }
          } else {
            return mkdir_p(path, mode, callback, position + 1);
          }
        });
      }
    });
  };

  run();

}).call(this);
