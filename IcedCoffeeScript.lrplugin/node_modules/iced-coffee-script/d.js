(function() {
  var fillPrimes, iced, primes, __iced_deferrals, __iced_k,
    __slice = [].slice,
    _this = this;

    iced = {
    Deferrals: (function() {

      function _Class(_arg) {
        this.continuation = _arg;
        this.count = 1;
        this.ret = null;
      }

      _Class.prototype._fulfill = function() {
        if (!--this.count) return this.continuation(this.ret);
      };

      _Class.prototype.defer = function(defer_params) {
        var _this = this;
        ++this.count;
        return function() {
          var inner_params, _ref;
          inner_params = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
          if (defer_params != null) {
            if ((_ref = defer_params.assign_fn) != null) {
              _ref.apply(null, inner_params);
            }
          }
          return _this._fulfill();
        };
      };

      return _Class;

    })(),
    findDeferral: function() {
      return null;
    }
  }
  __iced_k = function() {};

  fillPrimes = function(num_wanted, cb) {
    var candidate, i, prime, primes, sqrt, ___iced_passed_deferral, __iced_deferrals,
      _this = this;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    primes = [2];
    candidate = 3;
    (function(__iced_k) {
      var _results, _while;
      _results = [];
      _while = function(__iced_k) {
        var _break, _continue, _next;
        _break = function() {
          return __iced_k(_results);
        };
        _continue = function() {
          return _while(__iced_k);
        };
        _next = function(__iced_next_arg) {
          _results.push(__iced_next_arg);
          return _continue();
        };
        if (!(primes.length < num_wanted)) {
          return _break();
        } else {
          i = 0;
          sqrt = Math.sqrt(candidate);
          prime = true;
          console.log("step 1; i=" + i + " sqrt=" + sqrt + " primes=" + primes);
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: 'd.iced',
              funcname: 'fillPrimes'
            });
            setTimeout(__iced_deferrals.defer({
              lineno: 9
            }), 0);
            __iced_deferrals._fulfill();
          })(function() {
            console.log("step 2; i=" + i + " sqrt=" + sqrt + " primes=" + primes);
            while (primes[i] <= sqrt) {
              console.log("step 3; i=" + i + " sqrt=" + sqrt + " primes=" + primes);
              if ((candidate % primes[i]) === 0) {
                prime = false;
                break;
              }
              i++;
            }
            console.log("step 4; i=" + i + " sqrt=" + sqrt + " primes=" + primes);
            if (prime) primes.push(candidate);
            return _next(candidate++);
          });
        }
      };
      _while(__iced_k);
    })(function() {
      return cb(primes);
    });
  };

  __iced_deferrals = new iced.Deferrals(__iced_k, {
    filename: 'd.iced'
  });
  fillPrimes(1000, __iced_deferrals.defer({
    assign_fn: (function() {
      return function() {
        return primes = arguments[0];
      };
    })(),
    lineno: 22
  }));
  __iced_deferrals._fulfill();

}).call(this);
