(function() {
  var i, iced, j, __iced_deferrals, _next, _while,
    __slice = [].slice,
    _this = this;

    iced = {
    Deferrals: (function() {

      function _Class(_arg) {
        this.continuation = _arg;
        this.count = 1;
        this.ret = null;
      }

      _Class.prototype._fulfill = function() {
        if (!--this.count) return this.continuation(this.ret);
      };

      _Class.prototype.defer = function(defer_params) {
        var _this = this;
        ++this.count;
        return function() {
          var inner_params, _ref;
          inner_params = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
          if (defer_params != null) {
            if ((_ref = defer_params.assign_fn) != null) {
              _ref.apply(null, inner_params);
            }
          }
          return _this._fulfill();
        };
      };

      return _Class;

    })(),
    findDeferral: function() {
      return null;
    }
  }
  __iced_k = function() {};

  i = j = 0;

  _while = function(__iced_k) {
    var _break, _continue;
    _break = __iced_k;
    _continue = function() {
      console.log ("continuing on...");
      return _while(__iced_k);
    };
    _next = _continue;
    if (!(i < 10)) {
      return _break();
    } else {
      (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          filename: 'c.iced'
        });
        setTimeout(__iced_deferrals.defer({
          lineno: 4
        }), 10);
        __iced_deferrals._fulfill();
      })(function() {
        (function(__iced_k) {
          var _results, _while;
          _results = [];
          _while = function(__iced_k) {
            var _break, _continue, _next;
            _break = function() {
              return __iced_k(_results);
            };
            _continue = function() {
              return _while(__iced_k);
            };
            _next = function(__iced_next_arg) {
              _results.push(__iced_next_arg);
              return _continue();
            };
            if (!(j < 8)) {
              return _break();
            } else {
              (function(__iced_k) {
                __iced_deferrals = new iced.Deferrals(__iced_k, {
                  filename: 'c.iced'
                });
                setTimeout(__iced_deferrals.defer({
                  lineno: 6
                }), 10);
                __iced_deferrals._fulfill();
              })(function() {
                console.log("" + i + " " + j);
                return _next(j++);
              });
            }
          };
          _while(__iced_k);
        })(function() {
          console.log ("nexting out of the inner loop");
          return _next(i++);
        });
      });
    }
  };
  _while(__iced_k);

}).call(this);
