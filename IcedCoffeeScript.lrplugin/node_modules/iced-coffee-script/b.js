(function() {
  var bar, foo, iced, __iced_k,
    __slice = [].slice;

    iced = {
    Deferrals: (function() {

      function _Class(_arg) {
        this.continuation = _arg;
        this.count = 1;
        this.ret = null;
      }

      _Class.prototype._fulfill = function() {
        if (!--this.count) return this.continuation(this.ret);
      };

      _Class.prototype.defer = function(defer_params) {
        var _this = this;
        ++this.count;
        return function() {
          var inner_params, _ref;
          inner_params = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
          if (defer_params != null) {
            if ((_ref = defer_params.assign_fn) != null) {
              _ref.apply(null, inner_params);
            }
          }
          return _this._fulfill();
        };
      };

      return _Class;

    })()
  }
  __iced_k = function() {};

  bar = function(cb) {
    var __iced_deferrals,
      _this = this;
    (function(__iced_k) {
      __iced_deferrals = new iced.Deferrals(__iced_k);
      setTimeout(__iced_deferrals.defer({}), 10);
      __iced_deferrals._fulfill();
    })(function() {
      return cb(100);
    });
  };

  foo = function(cb) {
    var i, x, __iced_deferrals,
      _this = this;
    var __iced_parent_cb_10 = iced.find_deferral (arguments);
    (function(__iced_k) {
      var _i, _results, _while;
      i = 0;
      _results = [];
      _while = function(__iced_k) {
        var _break, _continue, _next;
        _break = function() {
          return __iced_k(_results);
        };
        _continue = function() {
          ++i;
          return _while(__iced_k);
        };
        _next = function(__iced_next_arg) {
          _results.push(__iced_next_arg);
          return _continue();
        };
        if (!(i <= 10)) {
          return _break();
        } else {
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k);
            bar(__iced_deferrals.defer({
              assign_fn: (function() {
                return function() {
                  return x = arguments[0];
                };
              })(),
              function : "foo",
              file : "b.iced",
              parent_cb : __iced_parent_cb_10
            }));
            __iced_deferrals._fulfill();
          })(_next);
        }
      };
      _while(__iced_k);
    })(function() {
      return cb();
    });
  };

}).call(this);
